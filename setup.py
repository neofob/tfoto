#!/usr/bin/env python

__author__ = 'tuan t. pham'
__email__ = 'tuan at vt dot edu'

'''
Loosely copied from https://github.com/virtuald/pyhcl.git
'''

from os.path import abspath, dirname, join, exists
from distutils.core import setup

import sys
import subprocess

setup_dir = abspath(dirname(__file__))
version_file = join(setup_dir, 'src', 'tfoto', 'version.py')

'''
Automatically generate a version.py based on the git last describe
This idea is from linux kernel's tool `git describe --always --long --dirty`
'''
if exists(join(setup_dir, '.git')):
    p = subprocess.Popen(["git", "describe", "--always", "--long", "--dirty"],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    out, err = p.communicate()
    # Make sure the git version has at least one tag
    if err:
        print("Error: You need to create annoated tag for this repo")
        sys.exit(1)

    '''
    Convert git version to PEP440 compliant version
    - Older versions of pip choke on local identifiers, so we can't include
    the git commit
    '''
    v, commits, local = out.decode('utf-8').rstrip().split('-', 2)
    if commits != '0' or '-dirty' in local:
        v = '%s.post0.dev%s' % (v, commits)

    # Create the version.py file
    with open(version_file, 'w') as fp:
        fp.write("# Autogenerated by setup.py\n__version__ = '{0}'".format(v))

    with open(join(setup_dir, 'README.md'), 'r') as readme_file:
        long_description = readme_file.read()

    with open(version_file) as fp:
        exec(compile(fp.read(), 'version.py', 'exec'), {}, locals())

install_requires=open(join(setup_dir, 'requirements.txt')).readlines()

setup(name='tfoto',
      version=__version__,
      description='Simple photo resizing tool',
      long_description=long_description,
      author='Tuan T. Pham',
      author_email='tuan@vt.edu',
      url='https://github.com/neofob/tfoto',
      package_dir={'': 'src'},
      package_data={'cfg': ['src/tfoto/image.cfg']},
      packages=['tfoto'],
      scripts=["scripts/tfoto"],
      include_package_data=True,
      setup_requires=install_requires,
      install_requires=install_requires,
      classifiers=[
          "Development Status :: 1 - Experimental",
          "Intended Audience :: Tinkerers",
          "License :: GPLv2",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Image Processing"
      ])
